plugins {
    id 'java'
    id 'jacoco'
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'io.freefair.lombok' version '8.1.0'
    id 'org.sonarqube' version '4.2.1.3168'
}

group = 'com.example.poc'
version = '1.0.0'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = "0.8.8"
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-batch'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.springdoc:springdoc-openapi-ui:1.7.0'
    implementation 'org.postgresql:postgresql'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.testcontainers:junit-jupiter'
    testImplementation 'org.testcontainers:postgresql'
}

ext {
    set('artifact', file("build/artifact"))
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    minHeapSize = "256m"
    maxHeapSize = "2048m"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.outputLocation = layout.buildDirectory.dir('jacoco')
    }
}

bootJar.doLast {
    copy {
        from(tasks.bootJar.outputs.files.singleFile)
        into(artifact)
        rename(tasks.bootJar.outputs.files.singleFile.name, "${project.name}.jar")
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "http://localhost:9000/"
        property "sonar.token", "squ_383ee9e504a5a6025bfb4a25725bd65b7e8b39ac"
        property 'sonar.sourceEncoding', 'UTF-8'
        property "sonar.jacoco.reportPaths", "${project.buildDir}/jacoco/test.exec"
        property "sonar.coverage.jacoco.xmlReportPath", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.junit.reportPaths", "${project.buildDir}/test-results/test"
        property "sonar.sources", "src/main"
        property "sonar.tests", "src/test"
    }
}
